version: '3.5'
services: 
    
  prometheus:
    build:
      context: ./docker/prometheus
    restart: always
    container_name: prometheus
    hostname: prometheus
    environment:
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - logs:/var/log
    networks:
      - spring-sandbox-network

  grafana:
    build:
      context: ./docker/grafana
    restart: always
    container_name: grafana
    hostname: grafana
    depends_on:
      - prometheus
    environment:
      - PATH=/usr/share/grafana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_HOME=/usr/share/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - "3000:3000"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network

  spring-boot-admin:
    build:
      context: ./spring-boot-admin
    restart: always
    container_name: spring-boot-admin
    hostname: spring-boot-admin
    depends_on:
      - prometheus
      - grafana
    ports:
      - "10100:10100"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network

  spring-cloud-netflix-eureka-peer1:
    build:
      context: ./spring-cloud-netflix-eureka
      dockerfile: Dockerfile-Peer1
    restart: always
    container_name: spring-cloud-netflix-eureka-peer1
    hostname: spring-cloud-netflix-eureka-peer1
    depends_on:
      - spring-boot-admin
    ports:
      - "10300:10300"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network

  spring-cloud-netflix-eureka-peer2:
    build:
      context: ./spring-cloud-netflix-eureka
      dockerfile: Dockerfile-Peer2
    restart: always
    container_name: spring-cloud-netflix-eureka-peer2
    hostname: spring-cloud-netflix-eureka-peer2
    depends_on:
      - spring-boot-admin
    ports:
      - "10301:10301"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network
      
  spring-cloud-config:
    build:
      context: ./spring-cloud-config-serveur
      dockerfile: Dockerfile
    restart: always
    container_name: spring-cloud-config
    hostname: spring-cloud-config
    depends_on:
      - spring-cloud-netflix-eureka-peer1
      - spring-cloud-netflix-eureka-peer2
    ports:
      - "10800:10800"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network
      
  ms-geolocation-peer1:
    build:
      context: ./spring-ms-countries
      dockerfile: Dockerfile-Peer1
    restart: always
    container_name: ms-geolocation-peer1
    hostname: ms-geolocation-peer1
    depends_on:
      - spring-cloud-config
    ports:
      - "10500:10500"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network

  ms-geolocation-peer2:
    build:
      context: ./spring-ms-countries
      dockerfile: Dockerfile-Peer2
    restart: always
    container_name: ms-geolocation-peer2
    hostname: ms-geolocation-peer2
    depends_on:
      - spring-cloud-config
    ports:
      - "10501:10501"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network

  ms-client-backend:
    build:
      context: ./spring-ms-client-backend
    restart: always
    container_name: ms-client-backend
    hostname: ms-client-backend
    depends_on:
      - spring-cloud-netflix-eureka-peer1
      - spring-cloud-netflix-eureka-peer2
    ports:
      - "10600:10600"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network

  spring-cloud-gateway:
    build:
      context: ./spring-cloud-gateway
    restart: always
    container_name: spring-cloud-gateway
    hostname: spring-cloud-gateway
    depends_on:
      - spring-cloud-netflix-eureka-peer1
      - spring-cloud-netflix-eureka-peer2
    ports:
      - "10200:10200"
    volumes:
      - logs:/var/log
    networks:
      - spring-sandbox-network
      
  client-frontend:
    build:
      context: ./ng-ms-client-frontend
    restart: always
    container_name: ng-client-frontend
    hostname: ng-client-frontend
    depends_on:
      - ms-client-backend
    ports:
      -  "10400:80"
    networks:
      - spring-sandbox-network

networks:
  spring-sandbox-network:

volumes:
  prometheus-data:
  logs:
